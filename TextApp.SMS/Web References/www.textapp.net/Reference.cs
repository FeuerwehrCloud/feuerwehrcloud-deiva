// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace TextApp.SMS.www.textapp.net {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="ServiceSoap", Namespace="http://www.textapp.net/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurveyResponsesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurveyResponsesAsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSurveyResponsesAsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnroutableSurveyResponsesAsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnrolIntoSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnrolIntoSurveyWithReferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelParticipantOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSMSStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSMSReplyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSMSInboundOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscribersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPremiumSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPremiumSMSInboundOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPremiumSMSStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditsLeftOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestSendSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestServiceOperationCompleted;
        
        public Service() {
            this.Url = "http://www.textapp.net/webservice/service.asmx";
        }
        
        public Service(string url) {
            this.Url = url;
        }
        
        public event SendSMSCompletedEventHandler SendSMSCompleted;
        
        public event GetSurveyResponsesCompletedEventHandler GetSurveyResponsesCompleted;
        
        public event GetSurveyResponsesAsXMLCompletedEventHandler GetSurveyResponsesAsXMLCompleted;
        
        public event GetAllSurveyResponsesAsXMLCompletedEventHandler GetAllSurveyResponsesAsXMLCompleted;
        
        public event GetUnroutableSurveyResponsesAsXMLCompletedEventHandler GetUnroutableSurveyResponsesAsXMLCompleted;
        
        public event EnrolIntoSurveyCompletedEventHandler EnrolIntoSurveyCompleted;
        
        public event EnrolIntoSurveyWithReferenceCompletedEventHandler EnrolIntoSurveyWithReferenceCompleted;
        
        public event CancelParticipantCompletedEventHandler CancelParticipantCompleted;
        
        public event GetSMSStatusCompletedEventHandler GetSMSStatusCompleted;
        
        public event GetSMSReplyCompletedEventHandler GetSMSReplyCompleted;
        
        public event GetSMSInboundCompletedEventHandler GetSMSInboundCompleted;
        
        public event GetSubscribersCompletedEventHandler GetSubscribersCompleted;
        
        public event SendPremiumSMSCompletedEventHandler SendPremiumSMSCompleted;
        
        public event GetPremiumSMSInboundCompletedEventHandler GetPremiumSMSInboundCompleted;
        
        public event GetPremiumSMSStatusCompletedEventHandler GetPremiumSMSStatusCompleted;
        
        public event GetCreditsLeftCompletedEventHandler GetCreditsLeftCompleted;
        
        public event TestSendSMSCompletedEventHandler TestSendSMSCompleted;
        
        public event TestServiceCompletedEventHandler TestServiceCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/SendSMS", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string SendSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl) {
            object[] results = this.Invoke("SendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginSendSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl}, callback, asyncState);
        }
        
        public string EndSendSMS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void SendSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl) {
            this.SendSMSAsync(returnCSVString, externalLogin, password, clientBillingReference, clientMessageReference, originator, destinations, body, validity, characterSetID, replyMethodID, replyData, statusNotificationUrl, null);
        }
        
        public void SendSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl, object userState) {
            if ((this.SendSMSOperationCompleted == null)) {
                this.SendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSMSCompleted);
            }
            this.InvokeAsync("SendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl}, this.SendSMSOperationCompleted, userState);
        }
        
        private void OnSendSMSCompleted(object arg) {
            if ((this.SendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSMSCompleted(this, new SendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSurveyResponses", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetSurveyResponses(bool returnCSVString, string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            object[] results = this.Invoke("GetSurveyResponses", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetSurveyResponses(bool returnCSVString, string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSurveyResponses", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, callback, asyncState);
        }
        
        public string EndGetSurveyResponses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetSurveyResponsesAsync(bool returnCSVString, string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            this.GetSurveyResponsesAsync(returnCSVString, externalLogin, password, clientEnrolmentReference, startDate, endDate, surveyID, null);
        }
        
        public void GetSurveyResponsesAsync(bool returnCSVString, string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, object userState) {
            if ((this.GetSurveyResponsesOperationCompleted == null)) {
                this.GetSurveyResponsesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurveyResponsesCompleted);
            }
            this.InvokeAsync("GetSurveyResponses", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, this.GetSurveyResponsesOperationCompleted, userState);
        }
        
        private void OnGetSurveyResponsesCompleted(object arg) {
            if ((this.GetSurveyResponsesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurveyResponsesCompleted(this, new GetSurveyResponsesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSurveyResponsesAsXML", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetSurveyResponsesAsXML(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            object[] results = this.Invoke("GetSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetSurveyResponsesAsXML(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, callback, asyncState);
        }
        
        public string EndGetSurveyResponsesAsXML(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetSurveyResponsesAsXMLAsync(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            this.GetSurveyResponsesAsXMLAsync(externalLogin, password, clientEnrolmentReference, startDate, endDate, surveyID, null);
        }
        
        public void GetSurveyResponsesAsXMLAsync(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, object userState) {
            if ((this.GetSurveyResponsesAsXMLOperationCompleted == null)) {
                this.GetSurveyResponsesAsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurveyResponsesAsXMLCompleted);
            }
            this.InvokeAsync("GetSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, this.GetSurveyResponsesAsXMLOperationCompleted, userState);
        }
        
        private void OnGetSurveyResponsesAsXMLCompleted(object arg) {
            if ((this.GetSurveyResponsesAsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurveyResponsesAsXMLCompleted(this, new GetSurveyResponsesAsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetAllSurveyResponsesAsXML", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetAllSurveyResponsesAsXML(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            object[] results = this.Invoke("GetAllSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllSurveyResponsesAsXML(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, callback, asyncState);
        }
        
        public string EndGetAllSurveyResponsesAsXML(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetAllSurveyResponsesAsXMLAsync(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            this.GetAllSurveyResponsesAsXMLAsync(externalLogin, password, clientEnrolmentReference, startDate, endDate, surveyID, null);
        }
        
        public void GetAllSurveyResponsesAsXMLAsync(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, object userState) {
            if ((this.GetAllSurveyResponsesAsXMLOperationCompleted == null)) {
                this.GetAllSurveyResponsesAsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSurveyResponsesAsXMLCompleted);
            }
            this.InvokeAsync("GetAllSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, this.GetAllSurveyResponsesAsXMLOperationCompleted, userState);
        }
        
        private void OnGetAllSurveyResponsesAsXMLCompleted(object arg) {
            if ((this.GetAllSurveyResponsesAsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSurveyResponsesAsXMLCompleted(this, new GetAllSurveyResponsesAsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetUnroutableSurveyResponsesAsXML", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetUnroutableSurveyResponsesAsXML(string externalLogin, string password, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            object[] results = this.Invoke("GetUnroutableSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        startDate,
                        endDate,
                        surveyID});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetUnroutableSurveyResponsesAsXML(string externalLogin, string password, System.DateTime startDate, System.DateTime endDate, long surveyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUnroutableSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        startDate,
                        endDate,
                        surveyID}, callback, asyncState);
        }
        
        public string EndGetUnroutableSurveyResponsesAsXML(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetUnroutableSurveyResponsesAsXMLAsync(string externalLogin, string password, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            this.GetUnroutableSurveyResponsesAsXMLAsync(externalLogin, password, startDate, endDate, surveyID, null);
        }
        
        public void GetUnroutableSurveyResponsesAsXMLAsync(string externalLogin, string password, System.DateTime startDate, System.DateTime endDate, long surveyID, object userState) {
            if ((this.GetUnroutableSurveyResponsesAsXMLOperationCompleted == null)) {
                this.GetUnroutableSurveyResponsesAsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnroutableSurveyResponsesAsXMLCompleted);
            }
            this.InvokeAsync("GetUnroutableSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        startDate,
                        endDate,
                        surveyID}, this.GetUnroutableSurveyResponsesAsXMLOperationCompleted, userState);
        }
        
        private void OnGetUnroutableSurveyResponsesAsXMLCompleted(object arg) {
            if ((this.GetUnroutableSurveyResponsesAsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnroutableSurveyResponsesAsXMLCompleted(this, new GetUnroutableSurveyResponsesAsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/EnrolIntoSurvey", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string EnrolIntoSurvey(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID) {
            object[] results = this.Invoke("EnrolIntoSurvey", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginEnrolIntoSurvey(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnrolIntoSurvey", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID}, callback, asyncState);
        }
        
        public string EndEnrolIntoSurvey(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void EnrolIntoSurveyAsync(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID) {
            this.EnrolIntoSurveyAsync(returnCSVString, externalLogin, password, destinations, surveyID, null);
        }
        
        public void EnrolIntoSurveyAsync(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, object userState) {
            if ((this.EnrolIntoSurveyOperationCompleted == null)) {
                this.EnrolIntoSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnrolIntoSurveyCompleted);
            }
            this.InvokeAsync("EnrolIntoSurvey", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID}, this.EnrolIntoSurveyOperationCompleted, userState);
        }
        
        private void OnEnrolIntoSurveyCompleted(object arg) {
            if ((this.EnrolIntoSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnrolIntoSurveyCompleted(this, new EnrolIntoSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/EnrolIntoSurveyWithReference", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string EnrolIntoSurveyWithReference(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, string clientEnrolmentReference) {
            object[] results = this.Invoke("EnrolIntoSurveyWithReference", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID,
                        clientEnrolmentReference});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginEnrolIntoSurveyWithReference(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, string clientEnrolmentReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnrolIntoSurveyWithReference", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID,
                        clientEnrolmentReference}, callback, asyncState);
        }
        
        public string EndEnrolIntoSurveyWithReference(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void EnrolIntoSurveyWithReferenceAsync(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, string clientEnrolmentReference) {
            this.EnrolIntoSurveyWithReferenceAsync(returnCSVString, externalLogin, password, destinations, surveyID, clientEnrolmentReference, null);
        }
        
        public void EnrolIntoSurveyWithReferenceAsync(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, string clientEnrolmentReference, object userState) {
            if ((this.EnrolIntoSurveyWithReferenceOperationCompleted == null)) {
                this.EnrolIntoSurveyWithReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnrolIntoSurveyWithReferenceCompleted);
            }
            this.InvokeAsync("EnrolIntoSurveyWithReference", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID,
                        clientEnrolmentReference}, this.EnrolIntoSurveyWithReferenceOperationCompleted, userState);
        }
        
        private void OnEnrolIntoSurveyWithReferenceCompleted(object arg) {
            if ((this.EnrolIntoSurveyWithReferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnrolIntoSurveyWithReferenceCompleted(this, new EnrolIntoSurveyWithReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/CancelParticipant", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string CancelParticipant(bool returnCSVString, string externalLogin, string password, string number, long surveyID) {
            object[] results = this.Invoke("CancelParticipant", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        surveyID});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginCancelParticipant(bool returnCSVString, string externalLogin, string password, string number, long surveyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelParticipant", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        surveyID}, callback, asyncState);
        }
        
        public string EndCancelParticipant(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void CancelParticipantAsync(bool returnCSVString, string externalLogin, string password, string number, long surveyID) {
            this.CancelParticipantAsync(returnCSVString, externalLogin, password, number, surveyID, null);
        }
        
        public void CancelParticipantAsync(bool returnCSVString, string externalLogin, string password, string number, long surveyID, object userState) {
            if ((this.CancelParticipantOperationCompleted == null)) {
                this.CancelParticipantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelParticipantCompleted);
            }
            this.InvokeAsync("CancelParticipant", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        surveyID}, this.CancelParticipantOperationCompleted, userState);
        }
        
        private void OnCancelParticipantCompleted(object arg) {
            if ((this.CancelParticipantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelParticipantCompleted(this, new CancelParticipantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSMSStatus", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetSMSStatus(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            object[] results = this.Invoke("GetSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetSMSStatus(bool returnCSVString, string externalLogin, string password, string clientMessageReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, callback, asyncState);
        }
        
        public string EndGetSMSStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetSMSStatusAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            this.GetSMSStatusAsync(returnCSVString, externalLogin, password, clientMessageReference, null);
        }
        
        public void GetSMSStatusAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference, object userState) {
            if ((this.GetSMSStatusOperationCompleted == null)) {
                this.GetSMSStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMSStatusCompleted);
            }
            this.InvokeAsync("GetSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, this.GetSMSStatusOperationCompleted, userState);
        }
        
        private void OnGetSMSStatusCompleted(object arg) {
            if ((this.GetSMSStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSMSStatusCompleted(this, new GetSMSStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSMSReply", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetSMSReply(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            object[] results = this.Invoke("GetSMSReply", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetSMSReply(bool returnCSVString, string externalLogin, string password, string clientMessageReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSMSReply", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, callback, asyncState);
        }
        
        public string EndGetSMSReply(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetSMSReplyAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            this.GetSMSReplyAsync(returnCSVString, externalLogin, password, clientMessageReference, null);
        }
        
        public void GetSMSReplyAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference, object userState) {
            if ((this.GetSMSReplyOperationCompleted == null)) {
                this.GetSMSReplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMSReplyCompleted);
            }
            this.InvokeAsync("GetSMSReply", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, this.GetSMSReplyOperationCompleted, userState);
        }
        
        private void OnGetSMSReplyCompleted(object arg) {
            if ((this.GetSMSReplyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSMSReplyCompleted(this, new GetSMSReplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSMSInbound", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetSMSInbound(bool returnCSVString, string externalLogin, string password, string number, string keyword) {
            object[] results = this.Invoke("GetSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetSMSInbound(bool returnCSVString, string externalLogin, string password, string number, string keyword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword}, callback, asyncState);
        }
        
        public string EndGetSMSInbound(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetSMSInboundAsync(bool returnCSVString, string externalLogin, string password, string number, string keyword) {
            this.GetSMSInboundAsync(returnCSVString, externalLogin, password, number, keyword, null);
        }
        
        public void GetSMSInboundAsync(bool returnCSVString, string externalLogin, string password, string number, string keyword, object userState) {
            if ((this.GetSMSInboundOperationCompleted == null)) {
                this.GetSMSInboundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMSInboundCompleted);
            }
            this.InvokeAsync("GetSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword}, this.GetSMSInboundOperationCompleted, userState);
        }
        
        private void OnGetSMSInboundCompleted(object arg) {
            if ((this.GetSMSInboundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSMSInboundCompleted(this, new GetSMSInboundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSubscribers", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetSubscribers(bool returnCSVString, string externalLogin, string password, string number, string keyword) {
            object[] results = this.Invoke("GetSubscribers", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetSubscribers(bool returnCSVString, string externalLogin, string password, string number, string keyword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubscribers", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword}, callback, asyncState);
        }
        
        public string EndGetSubscribers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetSubscribersAsync(bool returnCSVString, string externalLogin, string password, string number, string keyword) {
            this.GetSubscribersAsync(returnCSVString, externalLogin, password, number, keyword, null);
        }
        
        public void GetSubscribersAsync(bool returnCSVString, string externalLogin, string password, string number, string keyword, object userState) {
            if ((this.GetSubscribersOperationCompleted == null)) {
                this.GetSubscribersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscribersCompleted);
            }
            this.InvokeAsync("GetSubscribers", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword}, this.GetSubscribersOperationCompleted, userState);
        }
        
        private void OnGetSubscribersCompleted(object arg) {
            if ((this.GetSubscribersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscribersCompleted(this, new GetSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/SendPremiumSMS", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string SendPremiumSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string rbid, string body, long validity, int characterSetID, string statusNotificationUrl) {
            object[] results = this.Invoke("SendPremiumSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        rbid,
                        body,
                        validity,
                        characterSetID,
                        statusNotificationUrl});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginSendPremiumSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string rbid, string body, long validity, int characterSetID, string statusNotificationUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendPremiumSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        rbid,
                        body,
                        validity,
                        characterSetID,
                        statusNotificationUrl}, callback, asyncState);
        }
        
        public string EndSendPremiumSMS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void SendPremiumSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string rbid, string body, long validity, int characterSetID, string statusNotificationUrl) {
            this.SendPremiumSMSAsync(returnCSVString, externalLogin, password, clientBillingReference, clientMessageReference, rbid, body, validity, characterSetID, statusNotificationUrl, null);
        }
        
        public void SendPremiumSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string rbid, string body, long validity, int characterSetID, string statusNotificationUrl, object userState) {
            if ((this.SendPremiumSMSOperationCompleted == null)) {
                this.SendPremiumSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPremiumSMSCompleted);
            }
            this.InvokeAsync("SendPremiumSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        rbid,
                        body,
                        validity,
                        characterSetID,
                        statusNotificationUrl}, this.SendPremiumSMSOperationCompleted, userState);
        }
        
        private void OnSendPremiumSMSCompleted(object arg) {
            if ((this.SendPremiumSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPremiumSMSCompleted(this, new SendPremiumSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetPremiumSMSInbound", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetPremiumSMSInbound(bool returnCSVString, string externalLogin, string password, string shortcode, string keyword) {
            object[] results = this.Invoke("GetPremiumSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        shortcode,
                        keyword});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetPremiumSMSInbound(bool returnCSVString, string externalLogin, string password, string shortcode, string keyword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPremiumSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        shortcode,
                        keyword}, callback, asyncState);
        }
        
        public string EndGetPremiumSMSInbound(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetPremiumSMSInboundAsync(bool returnCSVString, string externalLogin, string password, string shortcode, string keyword) {
            this.GetPremiumSMSInboundAsync(returnCSVString, externalLogin, password, shortcode, keyword, null);
        }
        
        public void GetPremiumSMSInboundAsync(bool returnCSVString, string externalLogin, string password, string shortcode, string keyword, object userState) {
            if ((this.GetPremiumSMSInboundOperationCompleted == null)) {
                this.GetPremiumSMSInboundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPremiumSMSInboundCompleted);
            }
            this.InvokeAsync("GetPremiumSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        shortcode,
                        keyword}, this.GetPremiumSMSInboundOperationCompleted, userState);
        }
        
        private void OnGetPremiumSMSInboundCompleted(object arg) {
            if ((this.GetPremiumSMSInboundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPremiumSMSInboundCompleted(this, new GetPremiumSMSInboundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetPremiumSMSStatus", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetPremiumSMSStatus(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            object[] results = this.Invoke("GetPremiumSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetPremiumSMSStatus(bool returnCSVString, string externalLogin, string password, string clientMessageReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPremiumSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, callback, asyncState);
        }
        
        public string EndGetPremiumSMSStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetPremiumSMSStatusAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            this.GetPremiumSMSStatusAsync(returnCSVString, externalLogin, password, clientMessageReference, null);
        }
        
        public void GetPremiumSMSStatusAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference, object userState) {
            if ((this.GetPremiumSMSStatusOperationCompleted == null)) {
                this.GetPremiumSMSStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPremiumSMSStatusCompleted);
            }
            this.InvokeAsync("GetPremiumSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, this.GetPremiumSMSStatusOperationCompleted, userState);
        }
        
        private void OnGetPremiumSMSStatusCompleted(object arg) {
            if ((this.GetPremiumSMSStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPremiumSMSStatusCompleted(this, new GetPremiumSMSStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetCreditsLeft", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetCreditsLeft(bool returnCSVString, string externalLogin, string password) {
            object[] results = this.Invoke("GetCreditsLeft", new object[] {
                        returnCSVString,
                        externalLogin,
                        password});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetCreditsLeft(bool returnCSVString, string externalLogin, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCreditsLeft", new object[] {
                        returnCSVString,
                        externalLogin,
                        password}, callback, asyncState);
        }
        
        public string EndGetCreditsLeft(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetCreditsLeftAsync(bool returnCSVString, string externalLogin, string password) {
            this.GetCreditsLeftAsync(returnCSVString, externalLogin, password, null);
        }
        
        public void GetCreditsLeftAsync(bool returnCSVString, string externalLogin, string password, object userState) {
            if ((this.GetCreditsLeftOperationCompleted == null)) {
                this.GetCreditsLeftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditsLeftCompleted);
            }
            this.InvokeAsync("GetCreditsLeft", new object[] {
                        returnCSVString,
                        externalLogin,
                        password}, this.GetCreditsLeftOperationCompleted, userState);
        }
        
        private void OnGetCreditsLeftCompleted(object arg) {
            if ((this.GetCreditsLeftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditsLeftCompleted(this, new GetCreditsLeftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/TestSendSMS", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string TestSendSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl) {
            object[] results = this.Invoke("TestSendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginTestSendSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestSendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl}, callback, asyncState);
        }
        
        public string EndTestSendSMS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void TestSendSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl) {
            this.TestSendSMSAsync(returnCSVString, externalLogin, password, clientBillingReference, clientMessageReference, originator, destinations, body, validity, characterSetID, replyMethodID, replyData, statusNotificationUrl, null);
        }
        
        public void TestSendSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl, object userState) {
            if ((this.TestSendSMSOperationCompleted == null)) {
                this.TestSendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestSendSMSCompleted);
            }
            this.InvokeAsync("TestSendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl}, this.TestSendSMSOperationCompleted, userState);
        }
        
        private void OnTestSendSMSCompleted(object arg) {
            if ((this.TestSendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestSendSMSCompleted(this, new TestSendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/TestService", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string TestService(bool returnCSVString, string externalLogin, string password) {
            object[] results = this.Invoke("TestService", new object[] {
                        returnCSVString,
                        externalLogin,
                        password});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginTestService(bool returnCSVString, string externalLogin, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestService", new object[] {
                        returnCSVString,
                        externalLogin,
                        password}, callback, asyncState);
        }
        
        public string EndTestService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void TestServiceAsync(bool returnCSVString, string externalLogin, string password) {
            this.TestServiceAsync(returnCSVString, externalLogin, password, null);
        }
        
        public void TestServiceAsync(bool returnCSVString, string externalLogin, string password, object userState) {
            if ((this.TestServiceOperationCompleted == null)) {
                this.TestServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestServiceCompleted);
            }
            this.InvokeAsync("TestService", new object[] {
                        returnCSVString,
                        externalLogin,
                        password}, this.TestServiceOperationCompleted, userState);
        }
        
        private void OnTestServiceCompleted(object arg) {
            if ((this.TestServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestServiceCompleted(this, new TestServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public partial class SendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void SendSMSCompletedEventHandler(object sender, SendSMSCompletedEventArgs args);
    
    public partial class GetSurveyResponsesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurveyResponsesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetSurveyResponsesCompletedEventHandler(object sender, GetSurveyResponsesCompletedEventArgs args);
    
    public partial class GetSurveyResponsesAsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurveyResponsesAsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetSurveyResponsesAsXMLCompletedEventHandler(object sender, GetSurveyResponsesAsXMLCompletedEventArgs args);
    
    public partial class GetAllSurveyResponsesAsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSurveyResponsesAsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllSurveyResponsesAsXMLCompletedEventHandler(object sender, GetAllSurveyResponsesAsXMLCompletedEventArgs args);
    
    public partial class GetUnroutableSurveyResponsesAsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnroutableSurveyResponsesAsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetUnroutableSurveyResponsesAsXMLCompletedEventHandler(object sender, GetUnroutableSurveyResponsesAsXMLCompletedEventArgs args);
    
    public partial class EnrolIntoSurveyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnrolIntoSurveyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void EnrolIntoSurveyCompletedEventHandler(object sender, EnrolIntoSurveyCompletedEventArgs args);
    
    public partial class EnrolIntoSurveyWithReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnrolIntoSurveyWithReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void EnrolIntoSurveyWithReferenceCompletedEventHandler(object sender, EnrolIntoSurveyWithReferenceCompletedEventArgs args);
    
    public partial class CancelParticipantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelParticipantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void CancelParticipantCompletedEventHandler(object sender, CancelParticipantCompletedEventArgs args);
    
    public partial class GetSMSStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSMSStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetSMSStatusCompletedEventHandler(object sender, GetSMSStatusCompletedEventArgs args);
    
    public partial class GetSMSReplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSMSReplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetSMSReplyCompletedEventHandler(object sender, GetSMSReplyCompletedEventArgs args);
    
    public partial class GetSMSInboundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSMSInboundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetSMSInboundCompletedEventHandler(object sender, GetSMSInboundCompletedEventArgs args);
    
    public partial class GetSubscribersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscribersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetSubscribersCompletedEventHandler(object sender, GetSubscribersCompletedEventArgs args);
    
    public partial class SendPremiumSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendPremiumSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void SendPremiumSMSCompletedEventHandler(object sender, SendPremiumSMSCompletedEventArgs args);
    
    public partial class GetPremiumSMSInboundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPremiumSMSInboundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetPremiumSMSInboundCompletedEventHandler(object sender, GetPremiumSMSInboundCompletedEventArgs args);
    
    public partial class GetPremiumSMSStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPremiumSMSStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetPremiumSMSStatusCompletedEventHandler(object sender, GetPremiumSMSStatusCompletedEventArgs args);
    
    public partial class GetCreditsLeftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditsLeftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetCreditsLeftCompletedEventHandler(object sender, GetCreditsLeftCompletedEventArgs args);
    
    public partial class TestSendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestSendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void TestSendSMSCompletedEventHandler(object sender, TestSendSMSCompletedEventArgs args);
    
    public partial class TestServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void TestServiceCompletedEventHandler(object sender, TestServiceCompletedEventArgs args);
}
